[{"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\index.tsx":"1","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\reportWebVitals.ts":"2","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\App.tsx":"3","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\Inventory.tsx":"4","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\actions\\inventory-actions.tsx":"5","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory.tsx":"6","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory-item.tsx":"7","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory-context.tsx":"8","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory-search-bar.tsx":"9","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\hooks\\useGetInventory.tsx":"10","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\common\\header.tsx":"11","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\configureStore.tsx":"12","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\reducers\\index.tsx":"13","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\reducers\\inventory-reducers.tsx":"14","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\actions\\inventory-actions.tsx":"15","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\actions\\actionTypes.tsx":"16","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\api\\inventory-api.tsx":"17","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\reducers\\inventory-reducers.tsx":"18"},{"size":756,"mtime":1611798593618,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":751,"mtime":1612234002883,"results":"22","hashOfConfig":"20"},{"size":4078,"mtime":1609610388504,"results":"23","hashOfConfig":"20"},{"size":127,"mtime":1609551779111,"results":"24","hashOfConfig":"20"},{"size":4556,"mtime":1612930253334,"results":"25","hashOfConfig":"20"},{"size":290,"mtime":1609606115631,"results":"26","hashOfConfig":"20"},{"size":816,"mtime":1612234922296,"results":"27","hashOfConfig":"20"},{"size":299,"mtime":1609603852359,"results":"28","hashOfConfig":"20"},{"size":1641,"mtime":1612843096796,"results":"29","hashOfConfig":"20"},{"size":1350,"mtime":1612930253336,"results":"30","hashOfConfig":"20"},{"size":420,"mtime":1612228280518,"results":"31","hashOfConfig":"20"},{"size":197,"mtime":1612227999022,"results":"32","hashOfConfig":"20"},{"size":1299,"mtime":1612930253199,"results":"33","hashOfConfig":"20"},{"size":3065,"mtime":1612930253203,"results":"34","hashOfConfig":"20"},{"size":458,"mtime":1612926214965,"results":"35","hashOfConfig":"20"},{"size":1389,"mtime":1612930253336,"results":"36","hashOfConfig":"20"},{"size":819,"mtime":1612224300737,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"118gyh3",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\index.tsx",[],["84","85"],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\reportWebVitals.ts",[],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\App.tsx",["86"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ReactNotification from 'react-notifications-component';\r\nimport Header from './components/common/header';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ReactNotification />\r\n      <Header />\r\n      {/* <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\Inventory.tsx",["87","88","89"],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\actions\\inventory-actions.tsx",["90"],"import React from \"react\"\r\n\r\nexport const GET_ALL_SUCCESS = 'GET_ALL_SUCCESS';\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\r\n",["91","92"],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory.tsx",["93","94","95","96","97","98"],"import React, { useState, useEffect, useReducer, Reducer, useContext } from \"react\";\r\nimport { Select, FormControl, InputLabel, Container, Button, Input } from \"@material-ui/core\";\r\nimport InventoryItem from \"./inventory-item\";\r\nimport InventorySearchBar from \"./inventory-search-bar\";\r\nimport { InventoryProvider, InventoryContext } from \"./inventory-context\";\r\nimport { InventoryImage } from \"../../models/inventory-models\";\r\nimport { connect } from 'react-redux';\r\nimport * as inventoryActions from '../../redux/actions/inventory-actions';\r\nimport * as actionTypes from '../../redux/actions/actionTypes';\r\nimport { inventoryReducer } from \"../../redux/reducers/inventory-reducers\";\r\nimport { bindActionCreators } from 'redux';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Inventory(props) {\r\n    const { loadInventory, addInventory } = props;\r\n    useEffect(() => {\r\n        loadInventory();\r\n    }, []); //This array is an array of items to watch, and it it changes it will rerender again.\r\n    //Otherwise, with the empty array as a second argument to effect means the effect will run only once when the component mounts.\r\n\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [inventoryToAdd, setInventoryToAdd] = useState('')\r\n\r\n    //dispatch is a good generic term for managing state on multiple state objects\r\n    // const [{ inventory, status, error }, dispatch] = useReducer(inventoryReducer, {\r\n    //     status: actionTypes.REQUEST_STATUS.LOADING,\r\n    //     inventory: [],\r\n    //     error: null\r\n    // });\r\n\r\n    const isLoading = props.state.status === actionTypes.REQUEST_STATUS.LOADING;\r\n    const isSuccess = props.state.status === actionTypes.REQUEST_STATUS.SUCCESS;\r\n    const isError = props.state.status === actionTypes.REQUEST_STATUS.ERROR;\r\n\r\n    function handleAdd(event) {\r\n        event.preventDefault();\r\n        addInventory(inventoryToAdd);\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <FormControl variant=\"outlined\">\r\n                <InputLabel htmlFor=\"outlined-age-native-simple\">Site</InputLabel>\r\n                <Select\r\n                    native\r\n                    label=\"Site\"\r\n                >\r\n                    <option aria-label=\"None\" value=\"\" />\r\n                    <option value={10}>Ansley Mall</option>\r\n                    <option value={20}>Brookhaven</option>\r\n                    <option value={30}>GA Tech Campus</option>\r\n                </Select>\r\n            </FormControl>\r\n            <InventorySearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\r\n            {isLoading && <div>Loading...</div>}\r\n\r\n            {\r\n                isSuccess && <div>SUCCESS</div> &&\r\n                <InventoryComponent searchQuery={searchQuery}></InventoryComponent> &&\r\n                Object.values(props.state.inventory).map((inventory: any) => (\r\n                    <div key={inventory.Name}>{inventory.Name}</div>\r\n                ))\r\n            }\r\n            <Input type='text' placeholder='Type inventory to add' value={inventoryToAdd}\r\n                onChange={(e) => setInventoryToAdd(e.target.value)} />\r\n            <Button onClick={handleAdd}>Add Inventory</Button>\r\n            {isError && <p>Error occured! {props.state.error}</p>}\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst InventoryComponent = (props: any) => {\r\n    const { inventoryImages, inventory }: { inventoryImages: InventoryImage[], inventory: any } = useContext(InventoryContext);\r\n    return (\r\n        <div>\r\n            {inventoryImages.filter((image: InventoryImage) => {\r\n                return image.name.includes(props.searchQuery.toLowerCase()) && inventory.includes(image.name)\r\n            })\r\n                .map((inventoryImage: InventoryImage, i) => {\r\n                    return <InventoryItem key={i} inventoryImage={inventoryImage} />\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n\r\nInventory.propTypes = {\r\n    loadInventory: PropTypes.func.isRequired\r\n}\r\n\r\n// Determines what state is passed to our component via props\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state: state.inventoryReducer\r\n    }\r\n}\r\n\r\n// What actions we want to expose on our component\r\nconst mapDispatchToProps = {\r\n    loadInventory: inventoryActions.loadInventory,\r\n    addInventory: inventoryActions.addInventory\r\n}\r\n\r\n//when we omit mapDispatchToProps, our component gets a dispatch prop injected automatically\r\n// the \"connect\" api also connects our component to the store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Inventory);\r\n","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory-item.tsx",[],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory-context.tsx",["99","100","101","102","103"],"import React, { useEffect, useReducer } from \"react\";\r\nimport { GET_ALL_SUCCESS, UPDATE_STATUS } from \"../../actions/inventory-actions\";\r\nimport useGetInventory from \"../../hooks/useGetInventory\";\r\nimport { InventoryImage } from \"../../models/inventory-models\";\r\nimport { inventoryReducer, REQUEST_STATUS } from \"../../reducers/inventory-reducers\";\r\nimport InventoryItem from \"./inventory-item\";\r\n\r\nconst InventoryContext = React.createContext<any>([]);\r\n\r\nconst InventoryProvider = ({ children }: any) => {\r\n\r\n    const state = useGetInventory();\r\n\r\n    return (\r\n        <InventoryContext.Provider value={state}>\r\n            {children}\r\n        </InventoryContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport { InventoryContext, InventoryProvider }","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\Inventory\\inventory-search-bar.tsx",[],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\hooks\\useGetInventory.tsx",["104","105","106","107"],"import React from \"react\";\r\nimport { useEffect, useReducer, useState } from \"react\";\r\nimport * as actionTypes from \"../redux/actions/actionTypes\";\r\nimport * as inventoryActions from '../redux/actions/inventory-actions'\r\nimport { InventoryImage } from \"../models/inventory-models\";\r\nimport { inventoryReducer } from '../redux/reducers/inventory-reducers';\r\n\r\nfunction useGetInventory() {\r\n    const inventoryImages: InventoryImage[] = [\r\n        {\r\n            imageSrc: 'images/apple.jpg',\r\n            name: 'apple'\r\n        },\r\n        {\r\n            imageSrc: 'images/carrot.jpg',\r\n            name: 'carrots'\r\n        },\r\n        {\r\n            imageSrc: 'images/kale.jpg',\r\n            name: 'kale'\r\n        },\r\n    ];\r\n\r\n    const axios = require('axios');\r\n    const signal = React.useRef(axios.CancelToken.source()); // use React.useRef to guarantee we still have reference to this cancellation token is not disposed of during the liftime of the component\r\n\r\n    // dispatch is a good generic term for managing state on multiple state objects\r\n    const [{ inventory, status, error }, dispatch] = useReducer(inventoryReducer, {\r\n        status: actionTypes.REQUEST_STATUS.LOADING,\r\n        inventory: [],\r\n        error: null\r\n    });\r\n\r\n    useEffect(() => {\r\n        //inventoryActions.loadInventory();\r\n        return () => {\r\n            console.log('unmount and cancel any running axios request');\r\n            signal.current.cancel();\r\n        };\r\n    }, [])\r\n\r\n    const state = {\r\n        inventoryImages,\r\n        inventory,\r\n        status,\r\n        error\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default useGetInventory;\r\n","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\components\\common\\header.tsx",["108","109"],"import React from 'react';\r\nimport { AppBar, Tabs, Tab, Box } from \"@material-ui/core\";\r\nimport Inventory from '../Inventory/inventory';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n\r\n    const { children, value, index, ...other } = props;\r\n\r\n    console.log(props);\r\n\r\n    return (\r\n        <Box p={10}>\r\n            {value === index && children}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n    const activeStyle = { color: '#F15B2A' };\r\n\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar>\r\n                <Tabs value={value} onChange={handleChange}>\r\n                    <Tab label=\"Inventory\" />\r\n                    <Tab label=\"Vitamin\" />\r\n                    <Tab label=\"Personal\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            <TabPanel value={value} index={0}>\r\n                <Inventory />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                Item Two\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                Item Three\r\n            </TabPanel>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\configureStore.tsx",[],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\reducers\\index.tsx",[],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\reducers\\inventory-reducers.tsx",[],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\actions\\inventory-actions.tsx",["110"],"import * as actionTypes from './actionTypes';\r\nimport * as inventoryApi from '../../api/inventory-api';\r\nimport { store } from 'react-notifications-component';\r\nimport { Inventory } from '../../models/inventory-models';\r\n\r\nconst initialInventoryState = { Name: '', Count: 0 }\r\n\r\n\r\nexport function addInventorySuccess(inventoryState) {\r\n    return { type: actionTypes.ADD_INVENTORY_SUCCESS, inventoryState };\r\n}\r\n\r\nexport function addInventoryError(err) {\r\n    return { type: actionTypes.ADD_INVENTORY_FAILURE, err };\r\n}\r\n\r\nexport function getInventorySuccess(inventoryState) {\r\n    return { type: actionTypes.LOAD_INVENTORY_SUCCESS, inventoryState }\r\n}\r\n\r\nexport function getInventoryError(err) {\r\n    return { type: actionTypes.LOAD_INVENTORY_FAILURE, err }\r\n}\r\n\r\nexport function loadInventory() {\r\n    return async function onLoad(dispatch) { //every thunk returns a function that accepts dispatch as an argument. Redux thunk injects dispatch so we don't have to.\r\n        try {\r\n            dispatch({ type: actionTypes.LOAD_INVENTORY, initialInventoryState })\r\n            //sleep for 3 seconds to see Loading\r\n            await new Promise(resolve => {\r\n                setTimeout(resolve, 500)\r\n            })\r\n            const response: any = await inventoryApi.getInventoryAsync()\r\n            return onSuccess(response.data.data);\r\n        } catch (error) {\r\n            return onError(error);\r\n        }\r\n        function onSuccess(result) {\r\n            dispatch(getInventorySuccess(result))\r\n            store.addNotification({\r\n                title: \"Success!!!!!\",\r\n                message: \"GET succeeded!\",\r\n                type: \"success\",\r\n                insert: \"top\",\r\n                container: \"top-right\",\r\n                animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n                animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n                dismiss: {\r\n                    duration: 5000,\r\n                    onScreen: true\r\n                }\r\n            });\r\n        }\r\n        function onError(error) {\r\n            dispatch(getInventoryError(error))\r\n            store.addNotification({\r\n                title: \"FAILURE!!!!!\",\r\n                message: \"Inventory GET failed!\",\r\n                type: \"danger\",\r\n                insert: \"top\",\r\n                container: \"top-right\",\r\n                animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n                animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n                dismiss: {\r\n                    duration: 5000,\r\n                    onScreen: true\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function addInventory(inventoryName: string) {\r\n    return async function (dispatch) {\r\n        try {\r\n            dispatch({ type: actionTypes.ADD_INVENTORY, inventoryState: {} });\r\n            const result = await inventoryApi.createInventoryAsync(inventoryName);\r\n            dispatch(addInventorySuccess(result))\r\n        } catch (err) {\r\n            dispatch(addInventoryError(err))\r\n        }\r\n    }\r\n}","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\redux\\actions\\actionTypes.tsx",[],"C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\api\\inventory-api.tsx",["111","112"],"import SelectInput from \"@material-ui/core/Select/SelectInput\";\r\nimport { SSL_OP_EPHEMERAL_RSA } from \"constants\";\r\n\r\nexport async function getInventoryAsync(): Promise<any> {\r\n    const axios = require('axios');\r\n    return await axios({\r\n        url: 'http://localhost:8080/query',\r\n        method: 'post',\r\n        data: {\r\n            query: `\r\n                query getInventory {\r\n                    inventory {\r\n                        Name,\r\n                        Count,\r\n                        InventoryVitamin {\r\n                            VitaminId,\r\n                            PercentDailyValue\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n    })\r\n}\r\n\r\nexport async function createInventoryAsync(name: string): Promise<any> {\r\n    const axios = require('axios');\r\n    return await axios.post('http://localhost:8080/query', {\r\n        query: `\r\n                mutation AddInventory($newInventory: NewInventory!) {\r\n                    createInventory(input: $newInventory) {\r\n                        InventoryId\r\n                    }\r\n                }\r\n            `,\r\n        variables: {\r\n            'newInventory': {\r\n                'Name': name,\r\n                'Count': 100,\r\n                'Site': 'Ansley Mall'\r\n            }\r\n        }\r\n    }).then(result => {\r\n        return result.data.data\r\n    })\r\n}\r\n","C:\\Development\\go\\src\\my-go-apps\\VitaminUI\\src\\reducers\\inventory-reducers.tsx",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":2,"column":8,"nodeType":"119","messageId":"120","endLine":2,"endColumn":12},{"ruleId":"117","severity":1,"message":"121","line":1,"column":50,"nodeType":"119","messageId":"120","endLine":1,"endColumn":57},{"ruleId":"117","severity":1,"message":"122","line":13,"column":11,"nodeType":"119","messageId":"120","endLine":13,"endColumn":20},{"ruleId":"123","severity":1,"message":"124","line":67,"column":8,"nodeType":"125","endLine":67,"endColumn":10,"suggestions":"126"},{"ruleId":"117","severity":1,"message":"127","line":1,"column":8,"nodeType":"119","messageId":"120","endLine":1,"endColumn":13},{"ruleId":"113","replacedBy":"128"},{"ruleId":"115","replacedBy":"129"},{"ruleId":"117","severity":1,"message":"130","line":1,"column":38,"nodeType":"119","messageId":"120","endLine":1,"endColumn":48},{"ruleId":"117","severity":1,"message":"121","line":1,"column":50,"nodeType":"119","messageId":"120","endLine":1,"endColumn":57},{"ruleId":"117","severity":1,"message":"131","line":5,"column":10,"nodeType":"119","messageId":"120","endLine":5,"endColumn":27},{"ruleId":"117","severity":1,"message":"132","line":10,"column":10,"nodeType":"119","messageId":"120","endLine":10,"endColumn":26},{"ruleId":"117","severity":1,"message":"133","line":11,"column":10,"nodeType":"119","messageId":"120","endLine":11,"endColumn":28},{"ruleId":"123","severity":1,"message":"134","line":19,"column":8,"nodeType":"125","endLine":19,"endColumn":10,"suggestions":"135"},{"ruleId":"117","severity":1,"message":"136","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":21},{"ruleId":"117","severity":1,"message":"137","line":35,"column":14,"nodeType":"119","messageId":"120","endLine":35,"endColumn":23},{"ruleId":"117","severity":1,"message":"138","line":35,"column":25,"nodeType":"119","messageId":"120","endLine":35,"endColumn":31},{"ruleId":"117","severity":1,"message":"139","line":35,"column":33,"nodeType":"119","messageId":"120","endLine":35,"endColumn":38},{"ruleId":"123","severity":1,"message":"124","line":63,"column":8,"nodeType":"125","endLine":63,"endColumn":10,"suggestions":"140"},{"ruleId":"117","severity":1,"message":"141","line":2,"column":33,"nodeType":"119","messageId":"120","endLine":2,"endColumn":41},{"ruleId":"117","severity":1,"message":"142","line":4,"column":13,"nodeType":"119","messageId":"120","endLine":4,"endColumn":29},{"ruleId":"117","severity":1,"message":"143","line":28,"column":42,"nodeType":"119","messageId":"120","endLine":28,"endColumn":50},{"ruleId":"123","severity":1,"message":"144","line":38,"column":20,"nodeType":"119","endLine":38,"endColumn":27},{"ruleId":"117","severity":1,"message":"145","line":13,"column":40,"nodeType":"119","messageId":"120","endLine":13,"endColumn":45},{"ruleId":"117","severity":1,"message":"146","line":26,"column":11,"nodeType":"119","messageId":"120","endLine":26,"endColumn":22},{"ruleId":"117","severity":1,"message":"147","line":4,"column":10,"nodeType":"119","messageId":"120","endLine":4,"endColumn":19},{"ruleId":"117","severity":1,"message":"148","line":1,"column":8,"nodeType":"119","messageId":"120","endLine":1,"endColumn":19},{"ruleId":"117","severity":1,"message":"149","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":30},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Reducer' is defined but never used.","'increment' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInventoryAsync'. Either include it or remove the dependency array.","ArrayExpression",["152"],"'React' is defined but never used.",["150"],["151"],"'useReducer' is defined but never used.","'InventoryProvider' is defined but never used.","'inventoryReducer' is defined but never used.","'bindActionCreators' is defined but never used.","React Hook useEffect has a missing dependency: 'loadInventory'. Either include it or remove the dependency array.",["153"],"'InventoryItem' is defined but never used.","'inventory' is assigned a value but never used.","'status' is assigned a value but never used.","'error' is assigned a value but never used.",["154"],"'useState' is defined but never used.","'inventoryActions' is defined but never used.","'dispatch' is assigned a value but never used.","The ref value 'signal.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'signal.current' to a variable inside the effect, and use that variable in the cleanup function.","'other' is assigned a value but never used.","'activeStyle' is assigned a value but never used.","'Inventory' is defined but never used.","'SelectInput' is defined but never used.","'SSL_OP_EPHEMERAL_RSA' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"155","fix":"159"},"Update the dependencies array to be: [getInventoryAsync]",{"range":"160","text":"161"},"Update the dependencies array to be: [loadInventory]",{"range":"162","text":"163"},{"range":"164","text":"161"},[2300,2302],"[getInventoryAsync]",[954,956],"[loadInventory]",[2217,2219]]